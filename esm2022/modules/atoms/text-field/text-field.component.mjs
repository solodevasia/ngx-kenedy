import { Component, Input } from '@angular/core';
import { BaseComponent } from '@kenedy-ui/constants/base.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/forms";
import * as i3 from "../typogrpahy/typography.component";
export class TextFieldComponent extends BaseComponent {
    constructor() {
        super(...arguments);
        this.ngOutlined = '';
        this.type = 'text';
        this.errors = [];
        this.variant = 'default';
    }
    ngOnChanges() {
        this.classes = this.classes?.split('_')?.[0];
        this.ngOutlined = '';
        let addClass = 'border-t-0 border-l-0 border-r-0';
        switch (this.variant) {
            case 'outlined':
                this.ngOutlined =
                    'absolute -top-[7px] left-[9px] bg-white cursor-default';
                break;
            case 'filled':
                this.classes = `_ ${addClass} rounded-b-none rounded-t-md rounded-r-none rounded-l-none bg-gray-100`;
                break;
            case 'standard':
                this.classes = `_ ${addClass} !rounded-none`;
                break;
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TextFieldComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TextFieldComponent, selector: "knd-text-field", inputs: { label: "label", type: "type", formGroup: "formGroup", placeholder: "placeholder", errors: "errors", variant: "variant" }, usesInheritance: true, usesOnChanges: true, ngImport: i0, template: "<div class=\"w-fit relative\" *ngIf=\"formGroup.get(name)\">\n  <knd-typography\n    *ngIf=\"label\"\n    [id]=\"id.replace('__testid', '-label__testid')\"\n    [text]=\"label\"\n    classes=\"text-xs ml-1 text-gray-400\"\n    [ngClass]=\"ngOutlined\"\n  ></knd-typography>\n  <div\n    *ngIf=\"id\"\n    [id]=\"id.replace('__testid', '-base__testid')\"\n    [attr.data-testid]=\"id.replace('__testid', '-base__testid')\"\n    class=\"flex items-center rounded-md py-2 px-3 border border-gray-100 transition duration-500 hover:border-gray-200 w-96 {{\n      classes\n    }}\"\n    [ngClass]=\"formGroup.get(name)?.errors ? 'border-red-200' : ''\"\n    [formGroup]=\"formGroup\"\n  >\n    <input\n      [id]=\"id\"\n      [attr.data-testid]=\"id\"\n      [name]=\"name\"\n      [type]=\"type\"\n      class=\"outline-none border-none w-full text-sm text-gray-500 bg-transparent\"\n      autocomplete=\"off\"\n      [formControlName]=\"name\"\n      [placeholder]=\"placeholder\"\n    />\n  </div>\n  <div *ngFor=\"let error of errors\">\n    <knd-typography\n      *ngIf=\"formGroup.get(name)?.errors?.[error.name]\"\n      [id]=\"id.replace('__testid', '-error__testid')\"\n      classes=\"text-red-500 text-xs mt-1 ml-1\"\n      [text]=\"error.message\"\n    ></knd-typography>\n  </div>\n</div>\n", dependencies: [{ kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i2.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "component", type: i3.TypographyComponent, selector: "knd-typography", inputs: ["text"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TextFieldComponent, decorators: [{
            type: Component,
            args: [{ selector: 'knd-text-field', template: "<div class=\"w-fit relative\" *ngIf=\"formGroup.get(name)\">\n  <knd-typography\n    *ngIf=\"label\"\n    [id]=\"id.replace('__testid', '-label__testid')\"\n    [text]=\"label\"\n    classes=\"text-xs ml-1 text-gray-400\"\n    [ngClass]=\"ngOutlined\"\n  ></knd-typography>\n  <div\n    *ngIf=\"id\"\n    [id]=\"id.replace('__testid', '-base__testid')\"\n    [attr.data-testid]=\"id.replace('__testid', '-base__testid')\"\n    class=\"flex items-center rounded-md py-2 px-3 border border-gray-100 transition duration-500 hover:border-gray-200 w-96 {{\n      classes\n    }}\"\n    [ngClass]=\"formGroup.get(name)?.errors ? 'border-red-200' : ''\"\n    [formGroup]=\"formGroup\"\n  >\n    <input\n      [id]=\"id\"\n      [attr.data-testid]=\"id\"\n      [name]=\"name\"\n      [type]=\"type\"\n      class=\"outline-none border-none w-full text-sm text-gray-500 bg-transparent\"\n      autocomplete=\"off\"\n      [formControlName]=\"name\"\n      [placeholder]=\"placeholder\"\n    />\n  </div>\n  <div *ngFor=\"let error of errors\">\n    <knd-typography\n      *ngIf=\"formGroup.get(name)?.errors?.[error.name]\"\n      [id]=\"id.replace('__testid', '-error__testid')\"\n      classes=\"text-red-500 text-xs mt-1 ml-1\"\n      [text]=\"error.message\"\n    ></knd-typography>\n  </div>\n</div>\n" }]
        }], propDecorators: { label: [{
                type: Input
            }], type: [{
                type: Input
            }], formGroup: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], errors: [{
                type: Input
            }], variant: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dC1maWVsZC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9zaGFyZWQtdWkvYW5ndWxhci9uZ3gta2VuZWR5L3NyYy9tb2R1bGVzL2F0b21zL3RleHQtZmllbGQvdGV4dC1maWVsZC5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9zaGFyZWQtdWkvYW5ndWxhci9uZ3gta2VuZWR5L3NyYy9tb2R1bGVzL2F0b21zL3RleHQtZmllbGQvdGV4dC1maWVsZC5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBYSxNQUFNLGVBQWUsQ0FBQztBQUM1RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0scUNBQXFDLENBQUM7Ozs7O0FBWXBFLE1BQU0sT0FBTyxrQkFBbUIsU0FBUSxhQUFhO0lBSnJEOztRQUtFLGVBQVUsR0FBRyxFQUFFLENBQUM7UUFHUCxTQUFJLEdBQWtCLE1BQU0sQ0FBQztRQUc3QixXQUFNLEdBQThCLEVBQUUsQ0FBQztRQUN2QyxZQUFPLEdBQXFCLFNBQVMsQ0FBQztLQW1CaEQ7SUFqQkMsV0FBVztRQUNULElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM3QyxJQUFJLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQztRQUNyQixJQUFJLFFBQVEsR0FBRyxrQ0FBa0MsQ0FBQztRQUNsRCxRQUFRLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDcEIsS0FBSyxVQUFVO2dCQUNiLElBQUksQ0FBQyxVQUFVO29CQUNiLHdEQUF3RCxDQUFDO2dCQUMzRCxNQUFNO1lBQ1IsS0FBSyxRQUFRO2dCQUNYLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxRQUFRLHdFQUF3RSxDQUFDO2dCQUNyRyxNQUFNO1lBQ1IsS0FBSyxVQUFVO2dCQUNiLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxRQUFRLGdCQUFnQixDQUFDO2dCQUM3QyxNQUFNO1NBQ1Q7SUFDSCxDQUFDOytHQTFCVSxrQkFBa0I7bUdBQWxCLGtCQUFrQixzT0NiL0Isb3hDQXNDQTs7NEZEekJhLGtCQUFrQjtrQkFKOUIsU0FBUzsrQkFDRSxnQkFBZ0I7OEJBTWpCLEtBQUs7c0JBQWIsS0FBSztnQkFDRyxJQUFJO3NCQUFaLEtBQUs7Z0JBQ0csU0FBUztzQkFBakIsS0FBSztnQkFDRyxXQUFXO3NCQUFuQixLQUFLO2dCQUNHLE1BQU07c0JBQWQsS0FBSztnQkFDRyxPQUFPO3NCQUFmLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPbkNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJhc2VDb21wb25lbnQgfSBmcm9tICdAa2VuZWR5LXVpL2NvbnN0YW50cy9iYXNlLmNvbXBvbmVudCc7XG5pbXBvcnQge1xuICBUZXh0RmllbGRFcnJvckludGVyZmFjZSxcbiAgVGV4dEZpZWxkVHlwZSxcbiAgVGV4dEZpZWxkVmFyaWFudCxcbn0gZnJvbSAnLi90eXBlcy90ZXh0LWZpZWxkLnR5cGUnO1xuaW1wb3J0IHsgRm9ybUdyb3VwIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdrbmQtdGV4dC1maWVsZCcsXG4gIHRlbXBsYXRlVXJsOiAnLi90ZXh0LWZpZWxkLmNvbXBvbmVudC5odG1sJyxcbn0pXG5leHBvcnQgY2xhc3MgVGV4dEZpZWxkQ29tcG9uZW50IGV4dGVuZHMgQmFzZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG4gIG5nT3V0bGluZWQgPSAnJztcblxuICBASW5wdXQoKSBsYWJlbCE6IHN0cmluZztcbiAgQElucHV0KCkgdHlwZTogVGV4dEZpZWxkVHlwZSA9ICd0ZXh0JztcbiAgQElucHV0KCkgZm9ybUdyb3VwITogRm9ybUdyb3VwO1xuICBASW5wdXQoKSBwbGFjZWhvbGRlciE6IHN0cmluZztcbiAgQElucHV0KCkgZXJyb3JzOiBUZXh0RmllbGRFcnJvckludGVyZmFjZVtdID0gW107XG4gIEBJbnB1dCgpIHZhcmlhbnQ6IFRleHRGaWVsZFZhcmlhbnQgPSAnZGVmYXVsdCc7XG5cbiAgbmdPbkNoYW5nZXMoKTogdm9pZCB7XG4gICAgdGhpcy5jbGFzc2VzID0gdGhpcy5jbGFzc2VzPy5zcGxpdCgnXycpPy5bMF07XG4gICAgdGhpcy5uZ091dGxpbmVkID0gJyc7XG4gICAgbGV0IGFkZENsYXNzID0gJ2JvcmRlci10LTAgYm9yZGVyLWwtMCBib3JkZXItci0wJztcbiAgICBzd2l0Y2ggKHRoaXMudmFyaWFudCkge1xuICAgICAgY2FzZSAnb3V0bGluZWQnOlxuICAgICAgICB0aGlzLm5nT3V0bGluZWQgPVxuICAgICAgICAgICdhYnNvbHV0ZSAtdG9wLVs3cHhdIGxlZnQtWzlweF0gYmctd2hpdGUgY3Vyc29yLWRlZmF1bHQnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2ZpbGxlZCc6XG4gICAgICAgIHRoaXMuY2xhc3NlcyA9IGBfICR7YWRkQ2xhc3N9IHJvdW5kZWQtYi1ub25lIHJvdW5kZWQtdC1tZCByb3VuZGVkLXItbm9uZSByb3VuZGVkLWwtbm9uZSBiZy1ncmF5LTEwMGA7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnc3RhbmRhcmQnOlxuICAgICAgICB0aGlzLmNsYXNzZXMgPSBgXyAke2FkZENsYXNzfSAhcm91bmRlZC1ub25lYDtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG59XG4iLCI8ZGl2IGNsYXNzPVwidy1maXQgcmVsYXRpdmVcIiAqbmdJZj1cImZvcm1Hcm91cC5nZXQobmFtZSlcIj5cbiAgPGtuZC10eXBvZ3JhcGh5XG4gICAgKm5nSWY9XCJsYWJlbFwiXG4gICAgW2lkXT1cImlkLnJlcGxhY2UoJ19fdGVzdGlkJywgJy1sYWJlbF9fdGVzdGlkJylcIlxuICAgIFt0ZXh0XT1cImxhYmVsXCJcbiAgICBjbGFzc2VzPVwidGV4dC14cyBtbC0xIHRleHQtZ3JheS00MDBcIlxuICAgIFtuZ0NsYXNzXT1cIm5nT3V0bGluZWRcIlxuICA+PC9rbmQtdHlwb2dyYXBoeT5cbiAgPGRpdlxuICAgICpuZ0lmPVwiaWRcIlxuICAgIFtpZF09XCJpZC5yZXBsYWNlKCdfX3Rlc3RpZCcsICctYmFzZV9fdGVzdGlkJylcIlxuICAgIFthdHRyLmRhdGEtdGVzdGlkXT1cImlkLnJlcGxhY2UoJ19fdGVzdGlkJywgJy1iYXNlX190ZXN0aWQnKVwiXG4gICAgY2xhc3M9XCJmbGV4IGl0ZW1zLWNlbnRlciByb3VuZGVkLW1kIHB5LTIgcHgtMyBib3JkZXIgYm9yZGVyLWdyYXktMTAwIHRyYW5zaXRpb24gZHVyYXRpb24tNTAwIGhvdmVyOmJvcmRlci1ncmF5LTIwMCB3LTk2IHt7XG4gICAgICBjbGFzc2VzXG4gICAgfX1cIlxuICAgIFtuZ0NsYXNzXT1cImZvcm1Hcm91cC5nZXQobmFtZSk/LmVycm9ycyA/ICdib3JkZXItcmVkLTIwMCcgOiAnJ1wiXG4gICAgW2Zvcm1Hcm91cF09XCJmb3JtR3JvdXBcIlxuICA+XG4gICAgPGlucHV0XG4gICAgICBbaWRdPVwiaWRcIlxuICAgICAgW2F0dHIuZGF0YS10ZXN0aWRdPVwiaWRcIlxuICAgICAgW25hbWVdPVwibmFtZVwiXG4gICAgICBbdHlwZV09XCJ0eXBlXCJcbiAgICAgIGNsYXNzPVwib3V0bGluZS1ub25lIGJvcmRlci1ub25lIHctZnVsbCB0ZXh0LXNtIHRleHQtZ3JheS01MDAgYmctdHJhbnNwYXJlbnRcIlxuICAgICAgYXV0b2NvbXBsZXRlPVwib2ZmXCJcbiAgICAgIFtmb3JtQ29udHJvbE5hbWVdPVwibmFtZVwiXG4gICAgICBbcGxhY2Vob2xkZXJdPVwicGxhY2Vob2xkZXJcIlxuICAgIC8+XG4gIDwvZGl2PlxuICA8ZGl2ICpuZ0Zvcj1cImxldCBlcnJvciBvZiBlcnJvcnNcIj5cbiAgICA8a25kLXR5cG9ncmFwaHlcbiAgICAgICpuZ0lmPVwiZm9ybUdyb3VwLmdldChuYW1lKT8uZXJyb3JzPy5bZXJyb3IubmFtZV1cIlxuICAgICAgW2lkXT1cImlkLnJlcGxhY2UoJ19fdGVzdGlkJywgJy1lcnJvcl9fdGVzdGlkJylcIlxuICAgICAgY2xhc3Nlcz1cInRleHQtcmVkLTUwMCB0ZXh0LXhzIG10LTEgbWwtMVwiXG4gICAgICBbdGV4dF09XCJlcnJvci5tZXNzYWdlXCJcbiAgICA+PC9rbmQtdHlwb2dyYXBoeT5cbiAgPC9kaXY+XG48L2Rpdj5cbiJdfQ==